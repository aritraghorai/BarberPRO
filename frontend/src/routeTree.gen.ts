/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NotFoundRouteImport } from './routes/not-found'
import { Route as _protectedRouteImport } from './routes/__protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as Oauth2SuccessRouteImport } from './routes/oauth2/success'
import { Route as _protectedCustomerDashboardRouteImport } from './routes/__protected/customer/dashboard'
import { Route as _protectedBarberSetupProfileRouteImport } from './routes/__protected/barber/setup-profile'
import { Route as _protectedBarberDashboardRouteImport } from './routes/__protected/barber/dashboard'

const NotFoundRoute = NotFoundRouteImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const _protectedRoute = _protectedRouteImport.update({
  id: '/__protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Oauth2SuccessRoute = Oauth2SuccessRouteImport.update({
  id: '/oauth2/success',
  path: '/oauth2/success',
  getParentRoute: () => rootRouteImport,
} as any)
const _protectedCustomerDashboardRoute =
  _protectedCustomerDashboardRouteImport.update({
    id: '/customer/dashboard',
    path: '/customer/dashboard',
    getParentRoute: () => _protectedRoute,
  } as any)
const _protectedBarberSetupProfileRoute =
  _protectedBarberSetupProfileRouteImport.update({
    id: '/barber/setup-profile',
    path: '/barber/setup-profile',
    getParentRoute: () => _protectedRoute,
  } as any)
const _protectedBarberDashboardRoute =
  _protectedBarberDashboardRouteImport.update({
    id: '/barber/dashboard',
    path: '/barber/dashboard',
    getParentRoute: () => _protectedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/oauth2/success': typeof Oauth2SuccessRoute
  '/barber/dashboard': typeof _protectedBarberDashboardRoute
  '/barber/setup-profile': typeof _protectedBarberSetupProfileRoute
  '/customer/dashboard': typeof _protectedCustomerDashboardRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/oauth2/success': typeof Oauth2SuccessRoute
  '/barber/dashboard': typeof _protectedBarberDashboardRoute
  '/barber/setup-profile': typeof _protectedBarberSetupProfileRoute
  '/customer/dashboard': typeof _protectedCustomerDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/__protected': typeof _protectedRouteWithChildren
  '/not-found': typeof NotFoundRoute
  '/oauth2/success': typeof Oauth2SuccessRoute
  '/__protected/barber/dashboard': typeof _protectedBarberDashboardRoute
  '/__protected/barber/setup-profile': typeof _protectedBarberSetupProfileRoute
  '/__protected/customer/dashboard': typeof _protectedCustomerDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/not-found'
    | '/oauth2/success'
    | '/barber/dashboard'
    | '/barber/setup-profile'
    | '/customer/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/not-found'
    | '/oauth2/success'
    | '/barber/dashboard'
    | '/barber/setup-profile'
    | '/customer/dashboard'
  id:
    | '__root__'
    | '/'
    | '/__protected'
    | '/not-found'
    | '/oauth2/success'
    | '/__protected/barber/dashboard'
    | '/__protected/barber/setup-profile'
    | '/__protected/customer/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  _protectedRoute: typeof _protectedRouteWithChildren
  NotFoundRoute: typeof NotFoundRoute
  Oauth2SuccessRoute: typeof Oauth2SuccessRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__protected': {
      id: '/__protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _protectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth2/success': {
      id: '/oauth2/success'
      path: '/oauth2/success'
      fullPath: '/oauth2/success'
      preLoaderRoute: typeof Oauth2SuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__protected/customer/dashboard': {
      id: '/__protected/customer/dashboard'
      path: '/customer/dashboard'
      fullPath: '/customer/dashboard'
      preLoaderRoute: typeof _protectedCustomerDashboardRouteImport
      parentRoute: typeof _protectedRoute
    }
    '/__protected/barber/setup-profile': {
      id: '/__protected/barber/setup-profile'
      path: '/barber/setup-profile'
      fullPath: '/barber/setup-profile'
      preLoaderRoute: typeof _protectedBarberSetupProfileRouteImport
      parentRoute: typeof _protectedRoute
    }
    '/__protected/barber/dashboard': {
      id: '/__protected/barber/dashboard'
      path: '/barber/dashboard'
      fullPath: '/barber/dashboard'
      preLoaderRoute: typeof _protectedBarberDashboardRouteImport
      parentRoute: typeof _protectedRoute
    }
  }
}

interface _protectedRouteChildren {
  _protectedBarberDashboardRoute: typeof _protectedBarberDashboardRoute
  _protectedBarberSetupProfileRoute: typeof _protectedBarberSetupProfileRoute
  _protectedCustomerDashboardRoute: typeof _protectedCustomerDashboardRoute
}

const _protectedRouteChildren: _protectedRouteChildren = {
  _protectedBarberDashboardRoute: _protectedBarberDashboardRoute,
  _protectedBarberSetupProfileRoute: _protectedBarberSetupProfileRoute,
  _protectedCustomerDashboardRoute: _protectedCustomerDashboardRoute,
}

const _protectedRouteWithChildren = _protectedRoute._addFileChildren(
  _protectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _protectedRoute: _protectedRouteWithChildren,
  NotFoundRoute: NotFoundRoute,
  Oauth2SuccessRoute: Oauth2SuccessRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
